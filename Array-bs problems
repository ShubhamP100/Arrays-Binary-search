---------------------------------------------------------------------------------------------------------Arrays problems------------------------------------------------------------------------------

#include<iostream>
using namespace std;

int main()

 
{
 /*
 1) Remove a smaller element
 
 int ans=INT16_MAX;
 int arr[5]={2,4,5,8,1};
 
 for(int i=0;i<=5;i++)
   {
    if(arr[i]<ans)
    ans=arr[i];
   }
   cout<<ans<<" ";


2) Find the maximum element in array 

int ans=INT16_MIN;
int arr[5]={2,3,4,1,5};

for (int i = 0; i <5; i++)

{
    if(arr[i]>ans)
    ans=arr[i];
}

cout<<ans<<" ";

 3) Search an element on an array
  
  int x,index=-1;
  cout<<"Enter the element to search";      
  cin>>x;

  int arr[5]={2,3,4,1,6};
  
  for (int i = 0; i < 5; i++)
  {
    if(arr[i]==x)
    {
    index=i;
    break;
    }
  }
  cout<<index<<" ";
  
  4) Reverse an array
  
  int arr[5]={2,3,4,1,5}; 
  int s=0,e=4;
  while(s<e) 
  {
    swap(arr[s],arr[e]);
    s++,e--; 

  }
  for(int i=0;i<5;i++)
  {
    cout<<arr[i]<<" ";
  }
  
 
 5) Rotate an array by 1

// This is an function of rotating an array in clock wise direction
 void rotate(int arr[], int n)

{
         int last=arr;
         for(int i=n-2;i>=0;i--)
           arr[i+1]=arr[i];  
           arr[0]=last;
         
    
}  
 6) Find the index of smallest element in unsorted array

 int  index=0;
 
 int arr[5]={3,4,5,1,2};
 
 for(int i=1;i<=4;i++)
 { 
  if(arr[i]<arr[index])
  index=i;
 }

 cout<<index<<" ";
 

 7) Find the kth missing position integer in the is_array

    // The key hint is if the array is sorted in a regular form then return 
    the ans size + k value.
    
    int findKthPositive(vector<int>& arr, int k) {
        
        int start=0,end=arr.size()-1,mid, ans=arr.size();

        while(start<=end)
        {
             mid = start + (end-start) /2;

            if(arr[mid]-mid-1>=k){
              ans=mid;
              end=mid-1;
        }
            else
             start=mid+1;
        }   

       return ans+k; 
    



*/
}

-------------------Arrays end ----------------------------------------------




                                                                                                   Binary search prbms start

#include<bits/stdc++.h>
using namespace std;

// Just an theory and code of binary search how to implement to find the element in sorted array 
int Binarysearch(int arr[],int n,int key)
{
    // start end mid
   int start=0,mid,end=n-1;
   while(start<=end)
  {
          
    mid= start + (end-start)  /2;

    if(arr[mid]==key){
   
    return mid;
    }
    else if(arr[mid]<key)
    start=mid+1;
    else 
    end=mid-1;
}
 return -1;

}
int main()
{


int arr[1000];
int n;
cout<<"Enter the size of array";
cin>>n;
cout<<"Enter the elements";
for(int i=0;i<n;i++)
cin>>arr[i];

int key;
cout<<"Enter the key ";
cin>>key;

cout<<Binarysearch(arr,n,key);
 return 0;
}

#include<bits/stdc++.h>
using namespace std;

int Firstocc(int arr[],int n, int target)
{
 int start=0,end=n-1,first=-1,last=-1,mid;

// First while loop for first occurence of element
 while (start<=end)
 {
    // Step 1 : Find the mid element
    mid= start + (end-start)/2;

    if(arr[mid]==target)
    {
        first=mid;
        end=mid-1;
    }
    else if(arr[mid]<target)
    start=mid+1;
    else 
    end=mid-1;

 }
 return first;
 }
 
 int lastocc(int arr[],int n, int target)
 {
 int start=0,end=n-1,first=-1,last=-1,mid;

// First while loop for first occurence of element
 while (start<=end)
 {
    // Step 1 : Find the mid element
    mid= start + (end-start)/2;

    if(arr[mid]==target)
    {
        last=mid;
        start=mid+1;
    }
    else if(arr[mid]<target)
    start=mid+1;
    else 
    end=mid-1;

 }
  return last;
 }


Prb 2 -> First and last occurence /// Leetcode medium prb
int main()
{
int arr[1000];
int n;
cout<<"Enter the size of array";
cin>>n;

cout<<"Enter the number of elements";
for(int i=0;i<n;i++)
cin>>arr[i];

int target;
cout<<"Enter the target value";
cin>>target;

cout<<Firstocc(arr,n,target)<<" ";
cout<<lastocc(arr,n,target)<<" ";

}

Prb 3  Peak element in an array  // leetcode medium
class Solution {
public:
    int peakIndexInMountainArray(vector<int>& arr) {
     int start=0,end=arr.size()-1,mid;

     while(start<=end)
     {
        mid=end + (start-end)/2;
        if(arr[mid]>arr[mid-1] && arr[mid]> arr[mid+1])
        {
            return mid;
        } else if(arr[mid]>arr[mid-1]){
            start=mid+1;
        } else
           end=mid-1;
     }
        
        return -1;
    }
};
/* Just written an function to find the peak element in the array 
 ex: [2,3,4,10,5,6]-> In the given example the peak element is 
 10 so the code writtens the function of peak element = 3!!

*/

---------------------------------------------------------------------------------------------Prb 4 Search in insert position // lc medium
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
       int start=0, end=nums.size()-1, mid , ans=nums.size();
  /// regerence code of lc to the optimal approach..
       while(start<=end)
       {
         
         mid=start + (end-start)/2;
         
         if(nums[mid]==target)
         {
         return mid;
         }
         else if(nums[mid]<target)
         
         start=mid+1;
         
         else
         {
         ans=mid;
         end=mid-1;
         }
       } 
    return ans;
    }
    
};
